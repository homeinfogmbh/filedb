#! /usr/bin/env python3
"""filedbutil.

Usage:
    filedbutil refs
    filedbutil list
    filedbutil clean [options]

Options:
    --non-interactive      Do not ask questions.
    --this-is-not-a-drill  Do not just simulate cleanup.
    --help                 Show this page.
"""
from collections import defaultdict
from json import dumps
from sys import exit as exit_, stderr
from time import sleep

from blessings import Terminal

from fancylog import DEFAULT_ANIMATION, TTYAnimation, TTYAnimator
from filedb.orm import File

# References.
from hinews.orm import Image as HinewsImage
from his.orm import CustomerSettings as HisCustomerSettings
from hisfs.orm import File as HisfsFile
from openimmodb import Anhang as OpenimmodbAnhang, Kontakt as OpenimmodbKontakt


TERMINAL = Terminal()
REFERENCES = (
    (OpenimmodbAnhang, 'file'),
    (OpenimmodbKontakt, 'foto'),
    (HisCustomerSettings, '_file'),
    (HisfsFile, '_file'),
    (HinewsImage, '_file'))
CLEANUP_QUESTION = 'Type YES if you really want to clean up: '
SIM_TEMPLATE = '{}{}'
SIM_STAGES = ('   ', '.  ', '.. ', '...', ' ..', '  .')
SIM_ANIM = TTYAnimation(SIM_TEMPLATE, SIM_STAGES, DEFAULT_ANIMATION.end)
HOT_TEMPLATE = '{1} {0} {1}'
HOT_STAGES = (' ', TERMINAL.bold(TERMINAL.red('âš ')))
HOT_ANIM = TTYAnimation(HOT_TEMPLATE, HOT_STAGES, DEFAULT_ANIMATION.end)


def ask(question, default=False, yes=('yes', 'y'), ignorecase=True):
    """Ask a question and return accordingly."""

    try:
        reply = input(question)
    except EOFError:
        return False

    if not reply:
        return default

    if ignorecase:
        return reply.lower() in (y.lower() for y in yes)

    return reply in yes


def user_abort(*msgs):
    """Indicate abort by user."""

    print()
    print(*msgs, file=stderr)
    return 1


def clean(files, interactive=True, simulate=True):
    """Clean filedb records."""

    count = 0
    deleted = 0
    kept = 0
    updated = 0

    for count, file in enumerate(File, start=1):
        hardlinks = files[file.id]

        if hardlinks == 0:
            print('File <{}> is not used.'.format(file.id))
            question = 'Delete file {}? '.format(file.id)

            if not interactive or ask(question):
                if not simulate:
                    file.remove(force=True)

                deleted += 1
                print('DELETED {} ({}).'.format(file.id, file.sha256sum))
            else:
                kept += 1
                print('Keeping {}.'.format(file.id))
        else:
            kept += 1

            if file.hardlinks != hardlinks:
                old_hardlinks, file.hardlinks = file.hardlinks, hardlinks

                if not simulate:
                    file.save()

                updated += 1
                print('Updated hardlinks of <{}> from {} to {}.'.format(
                    file.id, old_hardlinks, hardlinks))

    print('Processed {} files.'.format(count), file=stderr)
    print('Deleted: {}, kept: {}, updated: {}.'.format(
        deleted, kept, updated), file=stderr)


def make_clean(files, interactive, simulate):
    """Invoke cleaning securely."""

    if simulate:
        animation = TTYAnimator('Just simulating', animation=SIM_ANIM)
    else:
        animation = TTYAnimator('THIS IS SERIOUS!', animation=HOT_ANIM)

    with animation:
        aborted = False

        try:
            sleep(3)
        except KeyboardInterrupt:
            aborted = True

    if aborted:
        return user_abort('Aborted by user.')

    try:
        if not interactive or ask(
                CLEANUP_QUESTION, yes=('YES',), ignorecase=False):
            clean(files, interactive=interactive, simulate=simulate)
    except KeyboardInterrupt:
        return user_abort('Aborted by user.')

    return 0


def main(options):
    """Runs the file DB utility."""

    interactive = not options['--non-interactive']
    simulate = not options['--this-is-not-a-drill']
    files = defaultdict(int)

    for model, attribute in REFERENCES:
        for record in model:
            file = getattr(record, attribute)

            if file is not None:
                files[file] += 1

    if options['refs']:
        print('Current references:')

        for ref in REFERENCES:
            print(' ' * 3, ref)
    elif options['list']:
        print(dumps(files, indent=2))
    elif options['clean']:
        # Notify user about simulation.
        return make_clean(files, interactive, simulate)

    return 0



if __name__ == '__main__':
    from docopt import docopt
    exit_(main(docopt(__doc__)))
